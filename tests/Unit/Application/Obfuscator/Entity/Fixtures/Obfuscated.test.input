<?php

use Mockery\Adapter\Phpunit\MockeryTestCase;
class _obf373839Test extends MockeryTestCase
{
    /**
    * @uniter_chain_wrong_type Unknown type for injection chain. Context: class: _obf373839, method: _obf373930, injection: self::_obf373935
    * @uniter_chain_wrong_type Unknown type for injection chain. Context: class: _obf373839, method: _obf373930, injection: foo("arg1", "arg2", 10)
    */
    public function test__obf373930()
    {
        $privateMethodClass = ClassHelper::makeAllMethodsPublic('_obf373938\\_obf373839');
        $selfObject_obf373839 = Mockery::mock($privateMethodClass)->makePartial();
        $this->assertEquals('PLACEHOLDER_ASSERT_RETURN', $selfObject_obf373839->_obf373930('PLACEHOLDER_ASSERT_v', 'PLACEHOLDER_ASSERT_w'));
    }
    /**
    * @uniter_chain_wrong_type Unknown type for injection chain. Context: class: _obf373839, method: _obf373931, injection: explode(",", $x)
    * @uniter_chain_wrong_type Unknown type for injection chain. Context: class: _obf373839, method: _obf373931, injection: fTwo($argA, $argB, $argC, fThree($argD, $argE, $argF, $argG, $argH))
    * @uniter_chain_wrong_type Unknown type for injection chain. Context: class: _obf373839, method: _obf373931, injection: count($colors)
    */
    public function test__obf373931()
    {
        $privateMethodClass = ClassHelper::makeAllMethodsPublic('_obf373938\\_obf373839');
        $selfObject_obf373839 = Mockery::mock($privateMethodClass)->makePartial();
        $this->assertEquals('PLACEHOLDER_ASSERT_RETURN', $selfObject_obf373839->_obf373931('PLACEHOLDER_ASSERT_argA', 'PLACEHOLDER_ASSERT_argB', 'PLACEHOLDER_ASSERT_argC', 'PLACEHOLDER_ASSERT_argD', 'PLACEHOLDER_ASSERT_argE', 'PLACEHOLDER_ASSERT_argF', 'PLACEHOLDER_ASSERT_argG', 'PLACEHOLDER_ASSERT_argH'));
    }
    /**
    * @uniter_chain_wrong_type Unknown type for injection chain. Context: class: _obf373839, method: _obf373932, injection: $foo->one("a", "b")->two("c", "d", "e")->three("fg")->four()
    * @uniter_chain_wrong_type Unknown type for injection chain. Context: class: _obf373839, method: _obf373932, injection: a()->b()->c()
    */
    public function test__obf373932()
    {
        $privateMethodClass = ClassHelper::makeAllMethodsPublic('_obf373938\\_obf373839');
        $selfObject_obf373839 = Mockery::mock($privateMethodClass)->makePartial();
        $this->assertEquals('PLACEHOLDER_ASSERT_RETURN', $selfObject_obf373839->_obf373932('PLACEHOLDER_ASSERT_strA', 'PLACEHOLDER_ASSERT_strB', 'PLACEHOLDER_ASSERT_strC', 'PLACEHOLDER_ASSERT_strD'));
    }
    /**
    * @uniter_chain_wrong_type Unknown type for injection chain. Context: class: _obf373839, method: _obf373933, injection: foo()
    */
    public function test__obf373933()
    {
        $privateMethodClass = ClassHelper::makeAllMethodsPublic('_obf373938\\_obf373839');
        $selfObject_obf373839 = Mockery::mock($privateMethodClass)->makePartial();
        $this->assertEquals('PLACEHOLDER_ASSERT_RETURN', $selfObject_obf373839->_obf373933('PLACEHOLDER_ASSERT_strA', 'PLACEHOLDER_ASSERT_strB', 'PLACEHOLDER_ASSERT_strC', 'PLACEHOLDER_ASSERT_strD', 'PLACEHOLDER_ASSERT_strE'));
    }
}
